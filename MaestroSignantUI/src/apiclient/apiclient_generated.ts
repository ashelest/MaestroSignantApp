/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class PingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7058";

    }

    get(  cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class PostingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7058";

    }

    signPosting(recipientName: string | null | undefined, recipientEmail: string | null | undefined, recipientMessage: string | null | undefined, file: FileParameter | null | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceResultOfPersonPostingDto> {
        let url_ = this.baseUrl + "/api/Posting/sign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (recipientName !== null && recipientName !== undefined)
            content_.append("RecipientName", recipientName.toString());
        if (recipientEmail !== null && recipientEmail !== undefined)
            content_.append("RecipientEmail", recipientEmail.toString());
        if (recipientMessage !== null && recipientMessage !== undefined)
            content_.append("RecipientMessage", recipientMessage.toString());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignPosting(_response);
        });
    }

    protected processSignPosting(response: AxiosResponse): Promise<ServiceResultOfPersonPostingDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText: any = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ServiceResultOfPersonPostingDto.fromJS(resultData200);
            return Promise.resolve<ServiceResultOfPersonPostingDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceResultOfPersonPostingDto>(null as any);
    }

    downloadAttachment(postingId: string, attachmentId: string , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Posting/{postingId}/{attachmentId}/attachment";
        if (postingId === undefined || postingId === null)
            throw new Error("The parameter 'postingId' must be defined.");
        url_ = url_.replace("{postingId}", encodeURIComponent("" + postingId));
        if (attachmentId === undefined || attachmentId === null)
            throw new Error("The parameter 'attachmentId' must be defined.");
        url_ = url_.replace("{attachmentId}", encodeURIComponent("" + attachmentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadAttachment(_response);
        });
    }

    protected processDownloadAttachment(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    getPostingStatus(postingId: string, attachmentId: string , cancelToken?: CancelToken | undefined): Promise<PostingStatusResult> {
        let url_ = this.baseUrl + "/api/Posting/{postingId}/{attachmentId}/status";
        if (postingId === undefined || postingId === null)
            throw new Error("The parameter 'postingId' must be defined.");
        url_ = url_.replace("{postingId}", encodeURIComponent("" + postingId));
        if (attachmentId === undefined || attachmentId === null)
            throw new Error("The parameter 'attachmentId' must be defined.");
        url_ = url_.replace("{attachmentId}", encodeURIComponent("" + attachmentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPostingStatus(_response);
        });
    }

    protected processGetPostingStatus(response: AxiosResponse): Promise<PostingStatusResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText: any = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PostingStatusResult.fromJS(resultData200);
            return Promise.resolve<PostingStatusResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostingStatusResult>(null as any);
    }

    getAllPersonPostings(  cancelToken?: CancelToken | undefined): Promise<PersonPostingDto[]> {
        let url_ = this.baseUrl + "/api/Posting";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllPersonPostings(_response);
        });
    }

    protected processGetAllPersonPostings(response: AxiosResponse): Promise<PersonPostingDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText: any = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PersonPostingDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PersonPostingDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonPostingDto[]>(null as any);
    }

    deleteAttachment(postingId: string , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Posting/{postingId}";
        if (postingId === undefined || postingId === null)
            throw new Error("The parameter 'postingId' must be defined.");
        url_ = url_.replace("{postingId}", encodeURIComponent("" + postingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAttachment(_response);
        });
    }

    protected processDeleteAttachment(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText: any = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class ServiceResultOfPersonPostingDto implements IServiceResultOfPersonPostingDto {
    error!: string;
    message!: string;
    isSuccess!: boolean;
    entity!: PersonPostingDto;

    constructor(data?: IServiceResultOfPersonPostingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.entity = new PersonPostingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error = _data["error"];
            this.message = _data["message"];
            this.isSuccess = _data["isSuccess"];
            this.entity = _data["entity"] ? PersonPostingDto.fromJS(_data["entity"]) : new PersonPostingDto();
        }
    }

    static fromJS(data: any): ServiceResultOfPersonPostingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResultOfPersonPostingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error;
        data["message"] = this.message;
        data["isSuccess"] = this.isSuccess;
        data["entity"] = this.entity ? this.entity.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServiceResultOfPersonPostingDto {
    error: string;
    message: string;
    isSuccess: boolean;
    entity: PersonPostingDto;
}

export class PersonPostingDto implements IPersonPostingDto {
    personId!: string;
    personName!: string;
    personEmail!: string;
    attachmentName!: string;
    attachmentStatus!: AttachmentStatus;
    createdDate!: string;
    modifiedDate?: string | undefined;
    postingId!: string;
    attachmentId!: string;

    constructor(data?: IPersonPostingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            this.personName = _data["personName"];
            this.personEmail = _data["personEmail"];
            this.attachmentName = _data["attachmentName"];
            this.attachmentStatus = _data["attachmentStatus"];
            this.createdDate = _data["createdDate"];
            this.modifiedDate = _data["modifiedDate"];
            this.postingId = _data["postingId"];
            this.attachmentId = _data["attachmentId"];
        }
    }

    static fromJS(data: any): PersonPostingDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPostingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["personName"] = this.personName;
        data["personEmail"] = this.personEmail;
        data["attachmentName"] = this.attachmentName;
        data["attachmentStatus"] = this.attachmentStatus;
        data["createdDate"] = this.createdDate;
        data["modifiedDate"] = this.modifiedDate;
        data["postingId"] = this.postingId;
        data["attachmentId"] = this.attachmentId;
        return data;
    }
}

export interface IPersonPostingDto {
    personId: string;
    personName: string;
    personEmail: string;
    attachmentName: string;
    attachmentStatus: AttachmentStatus;
    createdDate: string;
    modifiedDate?: string | undefined;
    postingId: string;
    attachmentId: string;
}

export enum AttachmentStatus {
    Created = "Created",
    Signed = "Signed",
    Rejected = "Rejected",
}

export class PostingStatusResult implements IPostingStatusResult {
    message!: string;
    success!: boolean;
    status!: PostingStatus;

    constructor(data?: IPostingStatusResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.success = _data["success"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): PostingStatusResult {
        data = typeof data === 'object' ? data : {};
        let result = new PostingStatusResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["success"] = this.success;
        data["status"] = this.status;
        return data;
    }
}

export interface IPostingStatusResult {
    message: string;
    success: boolean;
    status: PostingStatus;
}

export enum PostingStatus {
    Sent = "Sent",
    Completed = "Completed",
    CompletedPartially = "CompletedPartially",
    Expired = "Expired",
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
